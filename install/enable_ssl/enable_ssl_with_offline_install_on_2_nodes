#==========================================================================
# how to enable ssl with elasticsearch, kibana and xpack offline install
#==========================================================================

#----------------------------------------------------------------
# Descriptions
#----------------------------------------------------------------
# OS : CentOS 7
# General user name : sen
# version : elasticsearch 6.1.3, kibana 6.1.3

#----------------------------------------------------------------
主な流れ
#----------------------------------------------------------------
#・1. node1 に、elasticsearch + xpack の offline install を実施
#・2. node1 に、certutil による証明書の作成及び配布を行い、TLS 有効化＋動作確認
#・3. (スキップ可能) node1 に、kibana 兼用として、kibana + xpack の offline install を実施
#・4. (スキップ可能) node1 の kibana instance に、証明書の配布を行い、TLS 有効化＋動作確認
#・5. node2 に、elasticsearch + xpack の offline install を実施
#・6. node2 に、証明書の配布を行い、TLS 有効化＋動作確認

#-------------
# documents
#-------------
https://www.elastic.co/guide/en/elasticsearch/reference/current/rpm.html
https://www.elastic.co/blog/tls-elastic-stack-elasticsearch-kibana-logstash-filebeat


#-----------------------------------------------------------------
# step 0 
# - clean the directory
# - ディレクトリ掃除 
#-----------------------------------------------------------------
sudo rm -rf /usr/share/elasticsearch
sudo rm -rf /etc/elasticsearch
sudo rm -rf /var/log/elasticsearch
sudo rm -rf /var/lib/elasticsearch

sudo rm -rf /usr/share/kibana
sudo rm -rf /etc/kibana
sudo rm -rf /var/log/kibana


#-----------------------------------------------------------------
# step 0 
# - remove elasticsearch folder just in case
# - download elasticsearch and kibana and xpack
# - 日本語 : elasticsearch と kibana と xpack の install package をダウンロードし、必要に応じて各 node に配布
#-----------------------------------------------------------------

[sen@node1 ~]$ pwd
/home/sen
[sen@node1 ~]$ ll
-rw-rw-r--. 1 sen sen  28411530 Feb  1 07:51 elasticsearch-6.1.3.rpm
-rw-rw-r--. 1 sen sen  66438568 Feb  9 00:16 kibana-6.1.3-x86_64.rpm
-rw-rw-r--. 1 sen sen 307242730 Feb  9 00:17 x-pack-6.1.3.zip


#-----------------------------------------------------------------
# step 0 
# - about hosts file and ping node from each other
# - 日本語 : host ファイルの記述と node 間の ping による疎通確認
#-----------------------------------------------------------------
# /etc/hosts file for [node1] (we need kibana.local based on blog)
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
127.0.0.1 localhost kibana.local
192.168.0.2 node1.elastic.test.com node1
192.168.0.3 node2.elastic.test.com node2

# /etc/hosts file for [node2] (we don't need kibana.local here)
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.0.2 node1.elastic.test.com node1
192.168.0.3 node2.elastic.test.com node2


# ping
[root@node1 elasticsearch]# ping node2
PING node2.elastic.test.com (192.168.0.3) 56(84) bytes of data.
64 bytes from node2.elastic.test.com (192.168.0.3): icmp_seq=1 ttl=64 time=0.268 ms
64 bytes from node2.elastic.test.com (192.168.0.3): icmp_seq=2 ttl=64 time=0.651 ms

[root@node2 elasticsearch]# ping node1
PING node1.elastic.test.com (192.168.0.2) 56(84) bytes of data.
64 bytes from node1.elastic.test.com (192.168.0.2): icmp_seq=1 ttl=64 time=0.029 ms
64 bytes from node1.elastic.test.com (192.168.0.2): icmp_seq=2 ttl=64 time=0.050 ms



#-----------------------------------------------------------------
# step 1 - install elasticsearch and xpack on node1
#・1. node1 に、elasticsearch + xpack の offline install を実施
#-----------------------------------------------------------------
[sen@node1 ~]$ sudo rpm --install -v  elasticsearch-6.1.3.rpm
[sudo] password for sen: 
Preparing packages...
Creating elasticsearch group... OK
Creating elasticsearch user... OK
elasticsearch-0:6.1.3-1.noarch
### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd
 sudo systemctl daemon-reload
 sudo systemctl enable elasticsearch.service
### You can start elasticsearch service by executing
 sudo systemctl start elasticsearch.service

[sen@node1 ~]$ sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install file:///home/sen/x-pack-6.1.3.zip 
-> Downloading file:///home/sen/x-pack-6.1.3.zip
[=================================================] 100%   
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@     WARNING: plugin requires additional permissions     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
* java.io.FilePermission \\.\pipe\* read,write
* java.lang.RuntimePermission accessClassInPackage.com.sun.activation.registries
* java.lang.RuntimePermission getClassLoader
* java.lang.RuntimePermission setContextClassLoader
* java.lang.RuntimePermission setFactory
* java.net.SocketPermission * connect,accept,resolve
* java.security.SecurityPermission createPolicy.JavaPolicy
* java.security.SecurityPermission getPolicy
* java.security.SecurityPermission putProviderProperty.BC
* java.security.SecurityPermission setPolicy
* java.util.PropertyPermission * read,write
See http://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html
for descriptions of what these permissions allow and the associated risks.

Continue with installation? [y/N]y
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@        WARNING: plugin forks a native controller        @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
This plugin launches a native controller that is not subject to the Java
security manager nor to system call filters.

Continue with installation? [y/N]y
Elasticsearch keystore is required by plugin [x-pack], creating...
-> Installed x-pack
[sen@node1 ~]$ 




#-----------------------------------------------------------------
# step 2 - Create CA and set it to enalbe TLS
#・2. node1 に、certutil による証明書の作成及び配布を行い、TLS 有効化＋動作確認
#-----------------------------------------------------------------

## become root
#-----------------------------------------------------------------
[sen@node1 ~]$ sudo su -
Last login: Thu Feb  8 19:47:07 EST 2018 on pts/1


## set ES_HOME
#-----------------------------------------------------------------
[root@node1 ~]# ES_HOME=/usr/share/elasticsearch
[root@node1 ~]# ES_PATH_CONF=/etc/elasticsearch


## create tmp folder 
#---------------------
[root@node1 elasticsearch]# mkdir ~/tmp
[root@node1 elasticsearch]# cd $_
[root@node1 tmp]# pwd
/root/tmp
[root@node1 tmp]# mkdir cert_blog


# create CA
#-------------
[root@node1 tmp]# cd $ES_HOME
[root@node1 elasticsearch]# bin/x-pack/certgen --dn 'CN=MyExample Global CA' --pass --days 3650 --keysize 4096 --out ~/tmp/cert_blog/MyExample_Global_CA.zip
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL in the Elastic stack. Depending on the command
line option specified, you may be prompted for the following:

* The path to the output file
    * The output file is a zip file containing the signed certificates and
      private keys for each instance. If a Certificate Authority was generated,
      the certificate and private key will also be included in the output file.
* Information about each instance
    * An instance is any piece of the Elastic Stack that requires a SSL certificate.
      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats
      may all require a certificate and private key.
    * The minimum required value for each instance is a name. This can simply be the
      hostname, which will be used as the Common Name of the certificate. A full
      distinguished name may also be used.
    * A filename value may be required for each instance. This is necessary when the
      name would result in an invalid file or directory name. The name provided here
      is used as the directory name (within the zip) and the prefix for the key and
      certificate files. The filename is required if you are prompted and the name
      is not displayed in the prompt.
    * IP addresses and DNS names are optional. Multiple values can be specified as a
      comma separated string. If no IP addresses or DNS names are provided, you may
      disable hostname verification in your SSL configuration.
* Certificate Authority private key password
    * The password may be left empty if desired.

Let's get started...

Enter password for CA private key: *** kuni : input your password here
Enter instance name: *** kuni : just enter
A name must be provided
Would you like to specify another instance? Press 'y' to continue entering instance information: *** kuni : just enter
Certificates written to /root/tmp/cert_blog/MyExample_Global_CA.zip

This file should be properly secured as it contains the private keys for all
instances and the certificate authority.

After unzipping the file, there will be a directory for each instance containing
the certificate and private key. Copy the certificate, key, and CA certificate
to the configuration directory of the Elastic product that they will be used for
and follow the SSL configuration instructions in the product guide.

For client applications, you may only need to copy the CA certificate and
configure the client to trust this certificate.
[root@node1 elasticsearch]# 



## unzip the certificate
#--------------------------
[root@node1 elasticsearch]# cd ~/tmp/cert_blog
[root@node1 cert_blog]# unzip MyExample_Global_CA.zip
Archive:  MyExample_Global_CA.zip
   creating: ca/
  inflating: ca/ca.crt               
  inflating: ca/ca.key            
    


## Generate server certificates
## a. create instance yml file
#-----------------------------------------------------------------
[root@node1 cert_blog]# vi ~/tmp/cert_blog/certgen_example.yml


## b. input instance info
#-----------------------------------------------------------------
instances:
  - name: 'node1'
    dns: [ 'node1.elastic.test.com' ]
  - name: "node2"
    dns: [ 'node2.elastic.test.com' ]
  - name: 'my-kibana'
    dns: [ 'kibana.local' ]
  - name: 'logstash'
    dns: [ 'logstash.local' ]



## c. create server certificates for each instance
#-----------------------------------------------------------------
[root@node1 cert_blog]# cd $ES_HOME
[root@node1 elasticsearch]# bin/x-pack/certgen --days 1095 --cert ~/tmp/cert_blog/ca/ca.crt --key ~/tmp/cert_blog/ca/ca.key --pass --in ~/tmp/cert_blog/certgen_example.yml --out ~/tmp/cert_blog/certs.zip
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL in the Elastic stack. Depending on the command
line option specified, you may be prompted for the following:

* The path to the output file
    * The output file is a zip file containing the signed certificates and
      private keys for each instance. If a Certificate Authority was generated,
      the certificate and private key will also be included in the output file.
* Information about each instance
    * An instance is any piece of the Elastic Stack that requires a SSL certificate.
      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats
      may all require a certificate and private key.
    * The minimum required value for each instance is a name. This can simply be the
      hostname, which will be used as the Common Name of the certificate. A full
      distinguished name may also be used.
    * A filename value may be required for each instance. This is necessary when the
      name would result in an invalid file or directory name. The name provided here
      is used as the directory name (within the zip) and the prefix for the key and
      certificate files. The filename is required if you are prompted and the name
      is not displayed in the prompt.
    * IP addresses and DNS names are optional. Multiple values can be specified as a
      comma separated string. If no IP addresses or DNS names are provided, you may
      disable hostname verification in your SSL configuration.
* Certificate Authority private key password
    * The password may be left empty if desired.

Let's get started...

Enter password for CA private key: *** kuni : enter password specified for CA
Certificates written to /root/tmp/cert_blog/certs.zip

This file should be properly secured as it contains the private keys for all
instances and the certificate authority.

After unzipping the file, there will be a directory for each instance containing
the certificate and private key. Copy the certificate, key, and CA certificate
to the configuration directory of the Elastic product that they will be used for
and follow the SSL configuration instructions in the product guide.

For client applications, you may only need to copy the CA certificate and
configure the client to trust this certificate.


## unzip server certificates 
#-----------------------------------------------------------------
[root@node1 elasticsearch]# cd ~/tmp/cert_blog
[root@node1 cert_blog]# unzip certs.zip -d ./certs
Archive:  certs.zip
   creating: ./certs/node1/
  inflating: ./certs/node1/node1.crt  
  inflating: ./certs/node1/node1.key  
   creating: ./certs/node2/
  inflating: ./certs/node2/node2.crt  
  inflating: ./certs/node2/node2.key  
   creating: ./certs/my-kibana/
  inflating: ./certs/my-kibana/my-kibana.crt  
  inflating: ./certs/my-kibana/my-kibana.key  
   creating: ./certs/logstash/
  inflating: ./certs/logstash/logstash.crt  
  inflating: ./certs/logstash/logstash.key  



# Elasticsearch TLS setup
# a. copy cert file to config folder
#-----------------------------------------------------------------
[root@node1 ~]# cd $ES_PATH_CONF
[root@node1 elasticsearch]# pwd
/etc/elasticsearch
[root@node1 elasticsearch]# mkdir certs
[root@node1 elasticsearch]# cp ~/tmp/cert_blog/ca/ca.crt ~/tmp/cert_blog/certs/node1/* certs
[root@node1 elasticsearch]# ll certs
total 12
-rw-r--r--. 1 root elasticsearch 1915 Feb  9 01:25 ca.crt
-rw-r--r--. 1 root elasticsearch 1574 Feb  9 01:25 node1.crt
-rw-r--r--. 1 root elasticsearch 1679 Feb  9 01:25 node1.key
[root@node1 elasticsearch]# 


## b. edit elasticsearch.yml
#-----------------------------------------------------------------
[root@node1 elasticsearch]# vi elasticsearch.yml 

## add the following contents
node.name: node1
network.host: node1.elastic.test.com
xpack.ssl.key: certs/node1.key
xpack.ssl.certificate: certs/node1.crt
xpack.ssl.certificate_authorities: certs/ca.crt
xpack.security.transport.ssl.enabled: true
xpack.security.http.ssl.enabled: true
discovery.zen.ping.unicast.hosts: [ 'node1.elastic.test.com', 'node2.elastic.test.com']
node.max_local_storage_nodes: 2


## c. start node
#-----------------------------------------------------------------
[root@node1 ~]# systemctl start elasticsearch.service
Feb 25 08:12:22 node1.elastic.test.com systemd[1]: Starting Elasticsearch...
Feb 25 08:12:22 node1.elastic.test.com elasticsearch[4437]: OpenJDK 64-Bit Server VM...
Hint: Some lines were ellipsized, use -l to show in full.
[root@node1 elasticsearch]# systemctl status elasticsearch.service
● elasticsearch.service - Elasticsearch
   Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; disabled; vendor preset: disabled)
   Active: active (running) since Sun 2018-02-25 08:12:22 EST; 33s ago
     Docs: http://www.elastic.co
 Main PID: 4437 (java)
   CGroup: /system.slice/elasticsearch.service
           ├─4437 /bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingO...
           └─4481 /usr/share/elasticsearch/plugins/x-pack/platform/linux-x86_64/bin/...

Feb 25 08:12:22 node1.elastic.test.com systemd[1]: Started Elasticsearch.
Feb 25 08:12:22 node1.elastic.test.com systemd[1]: Starting Elasticsearch...
Feb 25 08:12:22 node1.elastic.test.com elasticsearch[4437]: OpenJDK 64-Bit Server VM...
Hint: Some lines were ellipsized, use -l to show in full.



## note : since it's already become https, so this curl will return empty result
#-----------------------------------------------------------------
[root@node1 elasticsearch]# curl -XGET http://node1.elastic.test.com:9200
curl: (52) Empty reply from server


## d. set built in user password
#-----------------------------------------------------------------
[root@node1 elasticsearch]# cd $ES_HOME
[root@node1 elasticsearch]# bin/x-pack/setup-passwords auto -u "https://node1.elastic.test.com:9200"

*** will get error here 
Failed to authenticate user 'elastic' against https://node1.elastic.test.com:9200/_xpack/security/_authenticate?pretty
Possible causes include:
 * The password for the 'elastic' user has already been changed on this cluster
 * Your elasticsearch node is running against a different keystore
   This tool used the keystore at /etc/elasticsearch/elasticsearch.keystore

ERROR: Failed to verify bootstrap password


*** it looks like we need to set the bootstrap password at first
[root@node1 elasticsearch]# bin/elasticsearch-keystore add bootstrap.password
Enter value for bootstrap.password: 

*** try to use bootstrap password to access elastic (we set it to changeme)
[root@node1 elasticsearch]# curl --cacert ~/tmp/cert_blog/ca/ca.crt -u elastic 'https://node1.elastic.test.com:9200/_cat/nodes'
Enter host password for user 'elastic':
192.168.0.2 15 94 10 0.21 0.21 0.23 mdi * node1

*** the next time we set password, its ok.
[root@node1 elasticsearch]# bin/x-pack/setup-passwords auto -u "https://node1.elastic.test.com:9200"
Initiating the setup of passwords for reserved users elastic,kibana,logstash_system.
The passwords will be randomly generated and printed to the console.
Please confirm that you would like to continue [y/N]y


Changed password for user kibana
PASSWORD kibana = Jf_vjZi25Exx!So58d6M

Changed password for user logstash_system
PASSWORD logstash_system = ki1_~k0nJ+hM7qO9fS21

Changed password for user elastic
PASSWORD elastic = $10&p4g1FV3@h=1@!?u!



## e. access _cat/nodes API via https
#-----------------------------------------------------------------
[root@node1 elasticsearch]# curl --cacert ~/tmp/cert_blog/ca/ca.crt -u elastic 'https://node1.elastic.test.com:9200/_cat/nodes'
Enter host password for user 'elastic':
127.0.0.1 10 90 4 0.02 0.29 0.62 mdi * node1




#-----------------------------------------------------------------
# step 3 - kibana + xpack offline install
#・3. (スキップ可能) node1 に、kibana 兼用として、kibana + xpack の offline install を実施
#-----------------------------------------------------------------
# switch back to general user
#-----------------------------------------------------------------
[sen@node1 ~]$ sudo rpm --install -v kibana-6.1.3-x86_64.rpm 
Preparing packages...
kibana-6.1.3-1.x86_64


# install x-pack
#-----------------------------------------------------------------
[sen@node1 ~]$ sudo /usr/share/kibana/bin/kibana-plugin install file:///home/sen/x-pack-6.1.3.zip 
Attempting to transfer from file:///home/sen/x-pack-6.1.3.zip
Transferring 307242730 bytes....................
Transfer complete
Retrieving metadata from plugin archive
Extracting plugin archive
Extraction complete
Optimizing and caching browser bundles...
Plugin installation complete



#-----------------------------------------------------------------
# step 4 - enable kibana SSL
#・4. (スキップ可能) node1 の kibana instance に、証明書の配布を行い、TLS 有効化＋動作確認
#-----------------------------------------------------------------
# switch back to root
#-----------------------------------------------------------------
[sen@node1 ~]$ sudo su -
[sudo] password for sen: 
Last login: Fri Feb  9 01:00:02 EST 2018 on pts/0


# set kibana home directory
#-----------------------------------------------------------------
KIBANA_HOME=/usr/share/kibana
KIBANA_PATH_CONFIG=/etc/kibana


## create config and config/certs folder and copy certs
## ***kuni : in order not to change the description from blog, we need to create config and config/certs 2 folder here.
#-----------------------------------------------------------------
[root@node1 kibana]# cd $KIBANA_PATH_CONFIG
[root@node1 kibana]# mkdir config
[root@node1 kibana]# mkdir config/certs
[root@node1 kibana]# cp ~/tmp/cert_blog/ca/ca.crt ~/tmp/cert_blog/certs/my-kibana/* config/certs
[root@node1 kibana]# 


## edit kibana.yml
#-----------------------------------------------------------------
[root@node1 kibana]# vi kibana.yml 


## add the following contents to kibana.yml
## *** kuni: remember to use the password generated for built-in user above
## *** kuni: also here I 'd like to use the abs path.
#-----------------------------------------------------------------
server.name: "my-kibana"
server.host: "kibana.local"
server.ssl.enabled: true
server.ssl.certificate: /etc/kibana/config/certs/my-kibana.crt
server.ssl.key: /etc/kibana/config/certs/my-kibana.key
elasticsearch.url: "https://node1.elastic.test.com:9200"
elasticsearch.username: "kibana"
elasticsearch.password: "Jf_vjZi25Exx!So58d6M"
elasticsearch.ssl.certificateAuthorities: [ "/etc/kibana/config/certs/ca.crt" ]



## start kibana
#-----------------------------------------------------------------
[root@node1 kibana]# service kibana start
kibana started
[root@node1 kibana]# service kibana status
kibana is running


# test kibana login
#-----------------------------------------------------------------
https://kibana.local:5601/


## change password of elastic user to "changeme"
## run this query in Dev Tools
#-----------------------------------------------------------------
POST _xpack/security/user/elastic/_password
{
  "password": "changeme"
}


## check _cat/nodes API via https again with new password
## access _cat/nodes API via https
#-----------------------------------------------------------------
[root@node1 elasticsearch]# curl --cacert ~/tmp/cert_blog/ca/ca.crt -u elastic:changeme 'https://node1.elastic.test.com:9200/_cat/nodes'
127.0.0.1 9 94 14 1.43 0.83 0.75 mdi * node1




#-----------------------------------------------------------------
# step 5 - install elasticsearch on node2
#・5. node2 に、elasticsearch + xpack の offline install を実施
#-----------------------------------------------------------------
[sen@node2 ~]$ sudo rpm --install -v  elasticsearch-6.1.3.rpm
[sudo] password for sen: 
Preparing packages...
Creating elasticsearch group... OK
Creating elasticsearch user... OK
elasticsearch-0:6.1.3-1.noarch
### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd
 sudo systemctl daemon-reload
 sudo systemctl enable elasticsearch.service
### You can start elasticsearch service by executing
 sudo systemctl start elasticsearch.service


# install x-pack
#-----------------------------------------------------------------
[sen@node2 ~]$ sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install file:///home/sen/x-pack-6.1.3.zip 
-> Downloading file:///home/sen/x-pack-6.1.3.zip
[=================================================] 100%   
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@     WARNING: plugin requires additional permissions     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
* java.io.FilePermission \\.\pipe\* read,write
* java.lang.RuntimePermission accessClassInPackage.com.sun.activation.registries
* java.lang.RuntimePermission getClassLoader
* java.lang.RuntimePermission setContextClassLoader
* java.lang.RuntimePermission setFactory
* java.net.SocketPermission * connect,accept,resolve
* java.security.SecurityPermission createPolicy.JavaPolicy
* java.security.SecurityPermission getPolicy
* java.security.SecurityPermission putProviderProperty.BC
* java.security.SecurityPermission setPolicy
* java.util.PropertyPermission * read,write
See http://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html
for descriptions of what these permissions allow and the associated risks.

Continue with installation? [y/N]y
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@        WARNING: plugin forks a native controller        @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
This plugin launches a native controller that is not subject to the Java
security manager nor to system call filters.

Continue with installation? [y/N]y
Elasticsearch keystore is required by plugin [x-pack], creating...
-> Installed x-pack
[sen@node2 ~]$ 



#-----------------------------------------------------------------
# step 6 - Enable TLS on node2
#・6. node2 に、証明書の配布を行い、TLS 有効化＋動作確認
#-----------------------------------------------------------------

## become root
#-----------------------------------------------------------------
[sen@node2 ~]$ sudo su -
Last login: Thu Feb  8 19:47:07 EST 2018 on pts/1


## set ES_HOME
#-----------------------------------------------------------------
[root@node2 ~]# ES_HOME=/usr/share/elasticsearch
[root@node2 ~]# ES_PATH_CONF=/etc/elasticsearch


# node2 TLS setup
# note: we use scp to copy things from node1 to node2
#-----------------------------------------------------------------
[root@node2 elasticsearch]# mkdir ~/tmp
[root@node2 elasticsearch]# cd $_
[root@node2 tmp]# pwd
/root/tmp
[root@node2 tmp]# mkdir cert_blog
[root@node2 tmp]# ll
drwxr-xr-x. 2 root          root               6 Feb  9 01:03 cert_blog
[root@node2 tmp]# 
[root@node2 tmp]# scp -r node1:~/tmp/cert_blog/* cert_blog/
root@node1's password: 
ca.crt                                        100% 1915     2.7MB/s   00:00    
ca.key                                        100% 3311     1.9MB/s   00:00    
certgen_example.yml                           100%  226   458.1KB/s   00:00    
node1.crt                                     100% 1590     2.4MB/s   00:00    
node1.key                                     100% 1679     2.3MB/s   00:00    
node2.crt                                     100% 1590     3.0MB/s   00:00    
node2.key                                     100% 1679     1.3MB/s   00:00    
my-kibana.crt                                 100% 1582   525.7KB/s   00:00    
my-kibana.key                                 100% 1675     1.5MB/s   00:00    
logstash.crt                                  100% 1582     1.6MB/s   00:00    
logstash.key                                  100% 1675     1.7MB/s   00:00    
certs.zip                                     100%   11KB  23.3MB/s   00:00    
MyExample_Global_CA.zip                       100% 4286    10.0MB/s   00:00    


[root@node2 ~]# cd $ES_PATH_CONF
[root@node2 elasticsearch]# pwd
/etc/elasticsearch
[root@node2 elasticsearch]# mkdir certs
[root@node2 elasticsearch]# cp ~/tmp/cert_blog/ca/ca.crt ~/tmp/cert_blog/certs/node2/* certs  
[root@node2 elasticsearch]# 
[root@node2 elasticsearch]# ll certs
total 12
-rw-r--r--. 1 root elasticsearch 1915 Feb 25 09:30 ca.crt
-rw-r--r--. 1 root elasticsearch 1590 Feb 25 09:30 node2.crt
-rw-r--r--. 1 root elasticsearch 1679 Feb 25 09:30 node2.key


## edit elasticsearch.yml
#-----------------------------------------------------------------
[root@node2 elasticsearch]# vi elasticsearch.yml 



## add the following contents
#-----------------------------------------------------------------
node.name: node2
network.host: node2.elastic.test.com
xpack.ssl.key: certs/node2.key
xpack.ssl.certificate: certs/node2.crt
xpack.ssl.certificate_authorities: certs/ca.crt
xpack.security.transport.ssl.enabled: true
xpack.security.http.ssl.enabled: true
discovery.zen.ping.unicast.hosts: [ 'node1.elastic.test.com', 'node2.elastic.test.com']
node.max_local_storage_nodes: 2


## start node
#-----------------------------------------------------------------
[root@node2 ~]# systemctl start elasticsearch.service
[root@node2 elasticsearch]# systemctl status elasticsearch.service
● elasticsearch.service - Elasticsearch
   Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; disabled; vendor preset: disabled)
   Active: active (running) since Sun 2018-02-25 09:31:54 EST; 11s ago
     Docs: http://www.elastic.co
 Main PID: 4962 (java)
   CGroup: /system.slice/elasticsearch.service
           ├─4962 /bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInit...
           └─5006 /usr/share/elasticsearch/plugins/x-pack/platform/linux-x86_...

Feb 25 09:31:54 node2.elastic.test.com systemd[1]: Started Elasticsearch.
Feb 25 09:31:54 node2.elastic.test.com systemd[1]: Starting Elasticsearch...
Feb 25 09:31:54 node2.elastic.test.com elasticsearch[4962]: OpenJDK 64-Bit Se...
Hint: Some lines were ellipsized, use -l to show in full.



## access _cat/nodes API via https
#-----------------------------------------------------------------
[root@node2 elasticsearch]# curl --cacert ~/tmp/cert_blog/ca/ca.crt -u elastic:changeme 'https://node2.elastic.test.com:9200/_cat/nodes'
192.168.0.3 15 96 98 1.41 0.50 0.28 mdi - node2
192.168.0.2 13 96 18 0.18 0.55 0.66 mdi * node1



