https://www.elastic.co/guide/en/elasticsearch/reference/current/rpm.html

## become root user
sudo su -

## import the elasticsearch PGP key
rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch

## edit repo
touch /etc/yum.repos.d/elasticsearch.repo
vi $_

## add the following content to repo
[elasticsearch-6.x]
name=Elasticsearch repository for 6.x packages
baseurl=https://artifacts.elastic.co/packages/6.x/yum
gpgcheck=1
gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
enabled=1
autorefresh=1
type=rpm-md

## install elasticsearch
[sen@localhost ~]$ sudo yum install elasticsearch
Loaded plugins: fastestmirror, langpacks
Loading mirror speeds from cached hostfile
 * base: ftp.iij.ad.jp
 * epel: ftp.riken.jp
 * extras: ftp.iij.ad.jp
 * updates: ftp.iij.ad.jp
Resolving Dependencies
--> Running transaction check
---> Package elasticsearch.noarch 0:6.1.3-1 will be installed
--> Finished Dependency Resolution

Dependencies Resolved

====================================================================================================================
 Package                      Arch                  Version                  Repository                        Size
====================================================================================================================
Installing:
 elasticsearch                noarch                6.1.3-1                  elasticsearch-6.x                 27 M

Transaction Summary
====================================================================================================================
Install  1 Package

Total download size: 27 M
Installed size: 30 M
Is this ok [y/d/N]: y
Downloading packages:
elasticsearch-6.1.3.rpm                                                                      |  27 MB  00:00:40     
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
Creating elasticsearch group... OK
Creating elasticsearch user... OK
  Installing : elasticsearch-6.1.3-1.noarch                                                                     1/1 
### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd
 sudo systemctl daemon-reload
 sudo systemctl enable elasticsearch.service
### You can start elasticsearch service by executing
 sudo systemctl start elasticsearch.service
  Verifying  : elasticsearch-6.1.3-1.noarch                                                                     1/1 

Installed:
  elasticsearch.noarch 0:6.1.3-1                                                                                    

Complete!
[sen@localhost ~]$ 



## start elasticsearch service
[sen@localhost ~]$ sudo service elasticsearch start
Starting elasticsearch (via systemctl):                    [  OK  ]
[sen@localhost ~]$ sudo service elasticsearch status
● elasticsearch.service - Elasticsearch
   Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; disabled; vendor preset: disabled)
   Active: active (running) since Thu 2018-02-01 09:33:55 EST; 11s ago
     Docs: http://www.elastic.co
 Main PID: 6067 (java)
   CGroup: /system.slice/elasticsearch.service
           └─6067 /bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseC...

Feb 01 09:33:55 192.168.1.10 systemd[1]: Started Elasticsearch.
Feb 01 09:33:55 192.168.1.10 systemd[1]: Starting Elasticsearch...
Feb 01 09:33:55 192.168.1.10 elasticsearch[6067]: OpenJDK 64-Bit Server VM warning: If the number of processo...ds=N
Hint: Some lines were ellipsized, use -l to show in full.


## check
[sen@localhost ~]$ curl -XGET http://localhost:9200
{
  "name" : "qXEi5b-",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "nUevEFiOTPG4N5ekjOKpWg",
  "version" : {
    "number" : "6.1.3",
    "build_hash" : "af51318",
    "build_date" : "2018-01-26T18:22:55.523Z",
    "build_snapshot" : false,
    "lucene_version" : "7.1.0",
    "minimum_wire_compatibility_version" : "5.6.0",
    "minimum_index_compatibility_version" : "5.0.0"
  },
  "tagline" : "You Know, for Search"
}



## directory layout
https://www.elastic.co/guide/en/elasticsearch/reference/current/rpm.html#rpm-layout


## become root
[sen@localhost ~]$ sudo su -
Last login: Thu Feb  1 09:27:52 EST 2018 on pts/2
[root@192 ~]# 


## set ES_HOME
ES_HOME=/usr/share/elasticsearch
ES_PATH_CONF=/etc/elasticsearch


## install x-pack
[root@192 ~]# cd $ES_HOME
[root@192 elasticsearch]# ll
total 216
drwxr-xr-x.  2 root root    140 Feb  1 08:03 bin
drwxr-xr-x.  2 root root   4096 Feb  1 08:03 lib
-rw-r--r--.  1 root root  11358 Jan 26 13:19 LICENSE.txt
drwxr-xr-x. 15 root root    272 Feb  1 08:03 modules
-rw-r--r--.  1 root root 191887 Jan 26 13:24 NOTICE.txt
drwxr-xr-x.  2 root root      6 Jan 26 13:24 plugins
-rw-r--r--.  1 root root   9267 Jan 26 13:19 README.textile
[root@192 elasticsearch]# ./bin/elasticsearch-plugin install x-pack
-> Downloading x-pack from elastic
[=================================================] 100%   
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@     WARNING: plugin requires additional permissions     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
* java.io.FilePermission \\.\pipe\* read,write
* java.lang.RuntimePermission accessClassInPackage.com.sun.activation.registries
* java.lang.RuntimePermission getClassLoader
* java.lang.RuntimePermission setContextClassLoader
* java.lang.RuntimePermission setFactory
* java.net.SocketPermission * connect,accept,resolve
* java.security.SecurityPermission createPolicy.JavaPolicy
* java.security.SecurityPermission getPolicy
* java.security.SecurityPermission putProviderProperty.BC
* java.security.SecurityPermission setPolicy
* java.util.PropertyPermission * read,write
See http://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html
for descriptions of what these permissions allow and the associated risks.

Continue with installation? [y/N]y
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@        WARNING: plugin forks a native controller        @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
This plugin launches a native controller that is not subject to the Java
security manager nor to system call filters.

Continue with installation? [y/N]y
Elasticsearch keystore is required by plugin [x-pack], creating...
-> Installed x-pack
[root@192 elasticsearch]# 


## create tmp folder
[root@192 elasticsearch]# mkdir ~/tmp
[root@192 elasticsearch]# cd $_
[root@192 tmp]# pwd
/root/tmp
[root@192 tmp]# mkdir cert_blog
[root@192 tmp]# ll
total 0
drwxr-xr-x. 2 root root 6 Feb  1 09:49 cert_blog


## create CA
[root@192 tmp]# cd $ES_HOME
[root@192 elasticsearch]# bin/x-pack/certgen --dn 'CN=MyExample Global CA' --pass --days 3650 --keysize 4096 --out ~/tmp/cert_blog/MyExample_Global_CA.zip
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL in the Elastic stack. Depending on the command
line option specified, you may be prompted for the following:

* The path to the output file
    * The output file is a zip file containing the signed certificates and
      private keys for each instance. If a Certificate Authority was generated,
      the certificate and private key will also be included in the output file.
* Information about each instance
    * An instance is any piece of the Elastic Stack that requires a SSL certificate.
      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats
      may all require a certificate and private key.
    * The minimum required value for each instance is a name. This can simply be the
      hostname, which will be used as the Common Name of the certificate. A full
      distinguished name may also be used.
    * A filename value may be required for each instance. This is necessary when the
      name would result in an invalid file or directory name. The name provided here
      is used as the directory name (within the zip) and the prefix for the key and
      certificate files. The filename is required if you are prompted and the name
      is not displayed in the prompt.
    * IP addresses and DNS names are optional. Multiple values can be specified as a
      comma separated string. If no IP addresses or DNS names are provided, you may
      disable hostname verification in your SSL configuration.
* Certificate Authority private key password
    * The password may be left empty if desired.

Let's get started...

Enter password for CA private key: *** kuni : input your password here
Enter instance name: *** kuni : just enter
A name must be provided
Would you like to specify another instance? Press 'y' to continue entering instance information: *** kuni : just enter
Certificates written to /root/tmp/cert_blog/MyExample_Global_CA.zip

This file should be properly secured as it contains the private keys for all
instances and the certificate authority.

After unzipping the file, there will be a directory for each instance containing
the certificate and private key. Copy the certificate, key, and CA certificate
to the configuration directory of the Elastic product that they will be used for
and follow the SSL configuration instructions in the product guide.

For client applications, you may only need to copy the CA certificate and
configure the client to trust this certificate.
[root@192 elasticsearch]# 



## unzip the certificate
[root@192 elasticsearch]# cd ~/tmp/cert_blog
[root@192 cert_blog]# unzip MyExample_Global_CA.zip
Archive:  MyExample_Global_CA.zip
   creating: ca/
  inflating: ca/ca.crt               
  inflating: ca/ca.key            



## create instance yml file
[root@192 cert_blog]# vi ~/tmp/cert_blog/certgen_example.yml


## input instance info
instances:
  - name: 'node1'
    dns: [ 'node1.local' ]
  - name: "node2"
    dns: [ 'node2.local' ]
  - name: 'my-kibana'
    dns: [ 'kibana.local' ]
  - name: 'logstash'
    dns: [ 'logstash.local' ]



## create server certificates for each instance
[root@192 cert_blog]# cd $ES_HOME
[root@192 elasticsearch]# bin/x-pack/certgen --days 1095 --cert ~/tmp/cert_blog/ca/ca.crt --key ~/tmp/cert_blog/ca/ca.key --pass --in ~/tmp/cert_blog/certgen_example.yml --out ~/tmp/cert_blog/certs.zip
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL in the Elastic stack. Depending on the command
line option specified, you may be prompted for the following:

* The path to the output file
    * The output file is a zip file containing the signed certificates and
      private keys for each instance. If a Certificate Authority was generated,
      the certificate and private key will also be included in the output file.
* Information about each instance
    * An instance is any piece of the Elastic Stack that requires a SSL certificate.
      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats
      may all require a certificate and private key.
    * The minimum required value for each instance is a name. This can simply be the
      hostname, which will be used as the Common Name of the certificate. A full
      distinguished name may also be used.
    * A filename value may be required for each instance. This is necessary when the
      name would result in an invalid file or directory name. The name provided here
      is used as the directory name (within the zip) and the prefix for the key and
      certificate files. The filename is required if you are prompted and the name
      is not displayed in the prompt.
    * IP addresses and DNS names are optional. Multiple values can be specified as a
      comma separated string. If no IP addresses or DNS names are provided, you may
      disable hostname verification in your SSL configuration.
* Certificate Authority private key password
    * The password may be left empty if desired.

Let's get started...

Enter password for CA private key: *** kuni : enter password specified for CA
Certificates written to /root/tmp/cert_blog/certs.zip

This file should be properly secured as it contains the private keys for all
instances and the certificate authority.

After unzipping the file, there will be a directory for each instance containing
the certificate and private key. Copy the certificate, key, and CA certificate
to the configuration directory of the Elastic product that they will be used for
and follow the SSL configuration instructions in the product guide.

For client applications, you may only need to copy the CA certificate and
configure the client to trust this certificate.




## unzip server certificates 
[root@192 elasticsearch]# cd ~/tmp/cert_blog
[root@192 cert_blog]# unzip certs.zip -d ./certs
Archive:  certs.zip
   creating: ./certs/node1/
  inflating: ./certs/node1/node1.crt  
  inflating: ./certs/node1/node1.key  
   creating: ./certs/node2/
  inflating: ./certs/node2/node2.crt  
  inflating: ./certs/node2/node2.key  
   creating: ./certs/my-kibana/
  inflating: ./certs/my-kibana/my-kibana.crt  
  inflating: ./certs/my-kibana/my-kibana.key  
   creating: ./certs/logstash/
  inflating: ./certs/logstash/logstash.crt  
  inflating: ./certs/logstash/logstash.key  



## edit hosts file
[root@192 cert_blog]# vi /etc/hosts



## edit hosts file like this
#127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
127.0.0.1 localhost node1.local node2.local kibana.local logstash.local


#### Elasticsearch TLS setup
## copy cert file to config folder
## note: in Linux, there is no explicit config folder, and we can only use 1 node here if we install elasticsearch from rpm command

[root@192 ~]# cd $ES_PATH_CONF
[root@192 elasticsearch]# pwd
/etc/elasticsearch
[root@192 elasticsearch]# ll
total 20
-rw-rw----. 1 root elasticsearch  416 Feb  1 08:11 elasticsearch.keystore
-rw-rw----. 1 root elasticsearch 2869 Jan 26 13:24 elasticsearch.yml
-rw-rw----. 1 root elasticsearch 2678 Jan 26 13:24 jvm.options
-rw-rw----. 1 root elasticsearch 5091 Jan 26 13:24 log4j2.properties
drwxr-x---. 2 root elasticsearch  104 Feb  1 08:11 x-pack
[root@192 elasticsearch]# mkdir certs
[root@192 elasticsearch]# cp ~/tmp/cert_blog/ca/ca.crt ~/tmp/cert_blog/certs/node1/* certs
[root@192 elasticsearch]# 
[root@192 elasticsearch]# ll certs
total 12
-rw-r--r--. 1 root elasticsearch 1919 Feb  1 08:27 ca.crt
-rw-r--r--. 1 root elasticsearch 1574 Feb  1 08:27 node1.crt
-rw-r--r--. 1 root elasticsearch 1675 Feb  1 08:27 node1.key
[root@192 elasticsearch]# 


## edit elasticsearch.yml
[root@192 elasticsearch]# vi elasticsearch.yml 



## add the following contents
node.name: node1
network.host: node1.local
xpack.ssl.key: certs/node1.key
xpack.ssl.certificate: certs/node1.crt
xpack.ssl.certificate_authorities: certs/ca.crt
xpack.security.transport.ssl.enabled: true
xpack.security.http.ssl.enabled: true
discovery.zen.ping.unicast.hosts: [ 'node1.local', 'node2.local']
node.max_local_storage_nodes: 2



## start node
[root@192 elasticsearch]# sudo service elasticsearch stop
Stopping elasticsearch (via systemctl):                    [  OK  ]
[root@192 elasticsearch]# sudo service elasticsearch start
Starting elasticsearch (via systemctl):                    [  OK  ]
[root@192 elasticsearch]# sudo service elasticsearch status
● elasticsearch.service - Elasticsearch
   Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; disabled; vendor preset: disabled)
   Active: active (running) since Thu 2018-02-01 09:54:16 EST; 11s ago
     Docs: http://www.elastic.co
 Main PID: 7024 (java)
   CGroup: /system.slice/elasticsearch.service
           ├─7024 /bin/java -Xms1g -Xmx1g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseC...
           └─7068 /usr/share/elasticsearch/plugins/x-pack/platform/linux-x86_64/bin/controller

Feb 01 09:54:16 192.168.1.10 systemd[1]: Started Elasticsearch.
Feb 01 09:54:16 192.168.1.10 systemd[1]: Starting Elasticsearch...
Feb 01 09:54:16 192.168.1.10 elasticsearch[7024]: OpenJDK 64-Bit Server VM warning: If the number of processo...ds=N
Hint: Some lines were ellipsized, use -l to show in full.


## since it's already become https, so this curl will return empty result
[root@192 elasticsearch]# curl -XGET http://localhost:9200
curl: (52) Empty reply from server


## set built in user password
[root@192 elasticsearch]# cd $ES_HOME
[root@192 elasticsearch]# bin/x-pack/setup-passwords auto -u "https://node1.local:9200"
Initiating the setup of passwords for reserved users elastic,kibana,logstash_system.
The passwords will be randomly generated and printed to the console.
Please confirm that you would like to continue [y/N]y


Changed password for user kibana
PASSWORD kibana = i^Uf@Z~jdZtxy#pfGr+j

Changed password for user logstash_system
PASSWORD logstash_system = o_=sxg*QlS_Hy=yS1t8-

Changed password for user elastic
PASSWORD elastic = wR_Z1WWO@PqO1#o_3wVT



## access _cat/nodes API via https
[root@192 elasticsearch]# curl --cacert ~/tmp/cert_blog/ca/ca.crt -u elastic 'https://node1.local:9200/_cat/nodes'
Enter host password for user 'elastic':
127.0.0.1 8 94 21 0.25 0.38 0.35 mdi * node1




## install kibana
## manual
https://www.elastic.co/guide/en/kibana/current/rpm.html

## install public signing key
[root@192 elasticsearch]# rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch


## install kibana from RPM repository
## create kibana repo file
[root@192 elasticsearch]# vi /etc/yum.repos.d/kibana.repo


## add the following contents to repo
[kibana-6.x]
name=Kibana repository for 6.x packages
baseurl=https://artifacts.elastic.co/packages/6.x/yum
gpgcheck=1
gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
enabled=1
autorefresh=1
type=rpm-md


## install start
[root@192 ~]# yum install kibana


## start kibana
[root@192 ~]# service kibana start
kibana started
[root@192 ~]# service kibana status
kibana is running

## set kibana home directory
KIBANA_HOME=/usr/share/kibana
KIBANA_PATH_CONFIG=/etc/kibana


## install kibana x-pack plugin
[root@192 kibana]# cd $KIBANA_HOME
[root@192 kibana]# ./bin/kibana-plugin install x-pack
Attempting to transfer from x-pack
Attempting to transfer from https://artifacts.elastic.co/downloads/kibana-plugins/x-pack/x-pack-6.1.3.zip
Transferring 269818640 bytes....................
Transfer complete
Retrieving metadata from plugin archive
Extracting plugin archive
Extraction complete
Optimizing and caching browser bundles...
Plugin installation complete
[root@192 kibana]# 



## create config and config/certs folder and copy certs
## ***kuni : in order not to change the description from blog, we need to create config and config/certs 2 folder here.
[root@192 kibana]# cd $KIBANA_PATH_CONFIG
[root@192 kibana]# mkdir config
[root@192 kibana]# mkdir config/certs
[root@192 kibana]# cp ~/tmp/cert_blog/ca/ca.crt ~/tmp/cert_blog/certs/my-kibana/* config/certs
[root@192 kibana]# 



## edit kibana.yml
[root@192 kibana]# vi kibana.yml 


## add the following contents to kibana.yml
## *** kuni: remember to use the password generated for built-in user above
## *** kuni: also here I 'd like to use the abs path.
server.name: "my-kibana"
server.host: "kibana.local"
server.ssl.enabled: true
server.ssl.certificate: /etc/kibana/config/certs/my-kibana.crt
server.ssl.key: /etc/kibana/config/certs/my-kibana.key
elasticsearch.url: "https://node1.local:9200"
elasticsearch.username: "kibana"
elasticsearch.password: "i^Uf@Z~jdZtxy#pfGr+j"
elasticsearch.ssl.certificateAuthorities: [ "/etc/kibana/config/certs/ca.crt" ]




## restart kibana
[root@192 kibana]# service kibana stop
kibana stopped.
[root@192 kibana]# service kibana start
kibana started
[root@192 kibana]# service kibana status
kibana is running


## login to kibana
https://kibana.local:5601/

## change password of elastic user to "changeme"
## run this query in Dev Tools
POST _xpack/security/user/elastic/_password
{
  "password": "changeme"
}


## check _cat/nodes API via https again with new password
## access _cat/nodes API via https
[root@192 elasticsearch]# curl --cacert ~/tmp/cert_blog/ca/ca.crt -u elastic:changeme 'https://node1.local:9200/_cat/nodes'
127.0.0.1 24 76 15 0.91 0.93 1.03 mdi * node1











